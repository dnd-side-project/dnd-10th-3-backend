# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Donworry Backend CI/CD

on:
  pull_request:
    types: [closed]
    branches: 'main'

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # JDK 셋업
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # yml 주입
    - name: make ymls
      run: |
        cd ./src/main/resources
        
        touch ./application-prod.yml
        echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
   
        touch ./application-redis.yml
        echo "${{ secrets.APPLICATION_REDIS }}" > ./application-redis.yml
        
        touch ./application-s3.yml
        echo "${{ secrets.APPLICATION_S3 }}" > ./application-s3.yml
        
    - name: Gradle 명령 실행을 위한 권한을 부여합니다
      run: chmod +x gradlew

    - name: Gradle build를 수행합니다
      run: ./gradlew build\

    - name: 테스트 결과를 PR에 코멘트로 등록합니다.
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: '**/build/test-results/test/TEST-*.xml'

    - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록합니다
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: '**/build/test-results/test/TEST-*.xml'
        token: ${{ secrets.TOKEN }}

    # 도커 허브 푸쉬
    - name: Docekr Build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.SERVICE_NAME }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.SERVICE_NAME }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    # 도커 컨테이너 변경 
    - name: Deploy
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.HOST }} 
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        script: |
          sudo docker rm $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.SERVICE_NAME }}
          docker-compose up -d
          sudo docker image prune -f
